-- 22.04.2018 06:55:39 AR V1.0a
-- 14.08.2018 06:32:00 AR V1.0b More info

block.setSize(31, 31)

generic = {
  parameter = {
  },

  init = function(self)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('HTMLInfo', 'Info', 'Backdoor', [[
Open a backdoor for commands like 'reboot'<br><br>
Receiving Lua source code on UDP port 11111.<br>
This code will be executed immediately.<br><br>
The answer is short JSON string:<br>
<ul>
<li>["success"]<ind x = "160">Success, no result<br>
<li>[{"success":"<i>result</i>"}]<ind x = "160">Success, result as string<br>
<li>[{"error":"'<i>error</i>"}]<ind x = "160">Error, error text as string<br>
</ul>
]], {Height = 180})
    gui.setSize(300)
  end,

  apply = function(self)
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x50, "'\\xEE\\x82\\xA2'")
  end,

  generate = function(self, remote)
    if not remote then
      return false
    end
    local _, _, group = remote:find('(%w*%d)')
    if group ~= 'CN1' then
      return false
    end
    local source =
      [==[
        local block = {}

        block.start = function()

          local function execute(source)
            print("Execute(" .. source .. ")")
            local app, error = load(source)
            source = nil
            if app then
              local success, result = pcall(app)
              if success then
                print('Success', result)
                if result then
                  return '[{"success":"' .. string.gsub(result, '"', '\\"')..'"}]'
                end
                return '["success"]'
              end
              print('Error during pcall', result)
              return '[{"error":"' .. string.gsub(result,'%"',' ') .. '"}]'
            end
            print('Error during load:',error)
            return '[{"error":"' .. string.gsub(error, '%"',' ') .. '"}]'
          end

          function Port11111Handler(socket, ip, port, events, status)
            --print("Port11111Recv", socket, ip, port, events, status)
            w5500.open(socket)
            while true do
              coroutine.yield()
              local recv, peerIP = sys.w5500.recv(socket);
              if recv then
                w5500.send(socket, execute(recv), peerIP, 11110)
              end
            end
          end

          sys.w5500.create("UDP", 11111, coroutine.create(Port11111Handler))
        end

        block.step = function()
        end

        return block
      ]==]
    return source
  end,

}

