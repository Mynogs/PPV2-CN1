-- 11.03.2018 10:06:25 AR V1.0a

block.setSize(101, 21)

generic = {
  parameter = {
    pin = 0,
    mode = 0,
    invert = false,
  },

  pins = {'A0', 'A1', 'A2', 'A3', 'A4', 'A7', 'A8', 'A9', 'A10', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'B0', 'B1', 'B2', 'B3', 'B10', 'B11', 'B12'},

  refreshPins = function(self)
    if self.parameter.mode <= 1 then
      block.setInputsPinCount(0)
      block.setOutputsPinCount(1)
      block.setOutputPinTypeRestrains(1, 'boolean')
    else
      block.setInputsPinCount(1)
      block.setOutputsPinCount(0)
      block.setInputPinTypeRestrains(1, 'boolean')
    end
  end,

  init = function(self)
    generic.refreshPins(self)
    block.modifyFlags('Realtime', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'GPIO', [[
Set mode of a GPIO pin
    ]])
    gui.add('ComboBox', 'ComboBoxPin', 'Pin', table.concat(generic.pins, '\n'), {DropDownCount = 20})
    gui.add('ComboBox', 'ComboBoxMode', 'Mode', [[
      Input
      Input with pullup
      Input with pulldown
      Output
      Output inital low
      Output inital high
    ]])
    gui.add('CheckBox', 'CheckBoxInvert', 'Invert signal')
    gui.set('ComboBoxPin', 'ItemIndex', self.parameter.pin)
    gui.set('ComboBoxMode', 'ItemIndex', self.parameter.mode)
    gui.set('CheckBoxInvert', 'Checked', self.parameter.invert)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.pin = gui.get('ComboBoxPin', 'ItemIndex')
    self.parameter.mode = gui.get('ComboBoxMode', 'ItemIndex')
    self.parameter.invert = gui.get('CheckBoxInvert', 'Checked')
    generic.refreshPins(self)
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar{
      Type = 0x5E,
      CenterDrawSource = 'draw.setColorA(0.8, 0.8, 0.8) draw.text(0, 0, w, h, "' .. generic.pins[self.parameter.pin + 1] .. '", 4)',
      FillColorSource = '0.36, 0.37, 0.42',
      PinNameColorSource = '1, 1, 1',
    }
  end,

  generate = function(self, remote)
    if not remote then
      if self.parameter.mode >= 3 then
        return false
      end
      return nil
    end
    local _, _, group = remote:find('(%w*%d)')
    if group ~= 'CN1' then
      return false
    end
    local source =
      [==[
        local block = {}

        block.start = function()
          START
        end

        block.step = function(INPUT)
          STEP
        end

        return block
      ]==]
    local init = {"'INPUT'", "'INPUT', 'PULLUP'", "'INPUT', 'PULLDOWN'", "'OUTPUT'", "'LOW'", "'HIGH'"}
    local step
    if self.parameter.mode <= 2 then
      step = 'return' .. (self.parameter.invert and ' not' or '') .. ' pin.get(\'' .. generic.pins[self.parameter.pin + 1] .. '\')'
    else
      if self.parameter.invert then
        step = 'pin.set(\'' .. generic.pins[self.parameter.pin + 1] .. '\', not a)'
      else
        step = 'pin.set(\'' .. generic.pins[self.parameter.pin + 1] .. '\', a)'
      end
    end
    local replaces = {
      ['NAME'] = self.name,
      ['INPUT'] = self.parameter.mode <= 2 and '' or 'a',
      ['START'] = 'pin.config(\'' .. generic.pins[self.parameter.pin + 1] .. '\', ' .. init[self.parameter.mode + 1] .. ')',
      ['STEP'] = step
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

